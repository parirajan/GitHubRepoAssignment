import os
import re
import sys

if len(sys.argv) < 2:
    print("Usage: python redact.py </input/path>")
    sys.exit(1)

input_path = sys.argv[1]
print(f"Input Path: {input_path}")

# -------------------------------
# Patterns for sensitive data
# -------------------------------
IP_PATTERN = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'

# Hostnames/URLs:
#  - Match http(s):// URLs, OR
#  - Bare hosts with >= 2 dots (three+ labels) and alphabetic TLD
# This avoids matching filenames like "libssl.so" or "libm.so.6".
HOSTNAME_PATTERN = r'''(?ix)
(?:                                      # EITHER:
  https?://[^\s"'<>]+                     #   full URL (stop at whitespace/quotes)
|                                         # OR:
  (?:
    (?:[a-z0-9]                           #   label starts with alnum
       (?:[a-z0-9-]{0,61}[a-z0-9])?       #   middle + ending alnum
    \.){2,}                               #   at least TWO dots => >= 3 labels
    [a-z]{2,63}                           #   alphabetic TLD (sane length)
  )
)
'''

# Email: strict boundaries so tokens like "foo.bar" don't trigger
EMAIL_PATTERN = r'(?<![\w.-])[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,63}(?![\w.-])'

PHONE_PATTERN = r'\b(?:\+?\d[\d .-]{7,}\d)\b'

# -------------------------------
# Timestamp patterns to preserve
# -------------------------------
UNIX_TIMESTAMP_PATTERN = r'\b\d{12,}\b'  # e.g., 1657558338808
LOG_TIMESTAMP_PATTERN  = r'\b\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2}(?:Z)?\b'  # e.g., 2024-05-23T12:00:01Z

# Redaction placeholder
REDACTION = '[REDACTED]'

# Folder to search
# folder_path = 'path/to/your/folder'
folder_path = input_path

def redact_file_content(content):
    # Preserve both Unix-style and log-style timestamps
    preserved_items = []

    def preserve_pattern(pattern, label):
        matches = re.findall(pattern, content)
        for i, match in enumerate(matches):
            placeholder = f'__{label}_{i}__'
            preserved_items.append((placeholder, match))
            nonlocal content_nonlocal
            content_nonlocal[0] = content_nonlocal[0].replace(match, placeholder)

    content_nonlocal = [content]
    preserve_pattern(UNIX_TIMESTAMP_PATTERN, "UNIX_TIMESTAMP")
    preserve_pattern(LOG_TIMESTAMP_PATTERN,  "LOG_TIMESTAMP")

    # Redact sensitive info (order helps reduce cross-effects)
    content_nonlocal[0] = re.sub(IP_PATTERN,       REDACTION, content_nonlocal[0])
    content_nonlocal[0] = re.sub(EMAIL_PATTERN,    REDACTION, content_nonlocal[0])
    content_nonlocal[0] = re.sub(HOSTNAME_PATTERN, REDACTION, content_nonlocal[0])
    content_nonlocal[0] = re.sub(PHONE_PATTERN,    REDACTION, content_nonlocal[0])

    # Restore preserved timestamps
    for placeholder, original in preserved_items:
        content_nonlocal[0] = content_nonlocal[0].replace(placeholder, original)

    return content_nonlocal[0]

def process_files(folder_path):
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                redacted_content = redact_file_content(content)

                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(redacted_content)

                print(f"Processed and redacted: {file_path}")
            except Exception as e:
                print(f"Could not process file {file_path}: {e}")

if __name__ == '__main__':
    process_files(folder_path)
