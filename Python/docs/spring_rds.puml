@startuml
title Aurora IAM Authentication Flow with Spring Boot and HikariCP

skinparam participant {
    BackgroundColor<<Spring Boot Client>> LightSkyBlue
    BackgroundColor<<AWS SDK>> LightYellow
    BackgroundColor<<AWS IAM>> LightGreen
    BackgroundColor<<Aurora>> LightCoral
    BorderColor Black
    FontSize 14
    FontColor Black
}

actor "Spring Boot Application" as SpringApp <<Spring Boot Client>>
participant "HikariCP Connection Pool" as Hikari <<Spring Boot Client>>
participant "AWS SDK" as SDK <<AWS SDK>>
participant "AWS IAM" as IAM <<AWS IAM>>
participant "Aurora Database" as Aurora <<Aurora>>

SpringApp -> Hikari : Request Connection
Hikari -> SDK : Generate Authentication Token
SDK -> IAM : Call `GenerateDBAuthToken` API\n(Include DB Endpoint, Port, Username)
IAM --> SDK : Signed IAM Authentication Token (15 min validity)
SDK --> Hikari : Token Returned

Hikari -> Aurora : Connect to DB using IAM Token
Aurora -> IAM : Validate Token
IAM --> Aurora : Token Valid/Invalid Response
Aurora --> Hikari : Connection Established

note right of Hikari
  Connection Pool:
  - Maintains active DB connections.
  - Reuses tokens until expiration.
end note

SpringApp -> Hikari : Request New Connection After Token Expiry
Hikari -> SDK : Generate New Token
SDK -> IAM : Call `GenerateDBAuthToken`
IAM --> SDK : New Token (15 min validity)
SDK --> Hikari : Token Updated
Hikari -> Aurora : Renew Connection with New Token

note right of SpringApp
  Key Features:
  - Automatic token renewal.
  - Seamless integration with HikariCP.
  - High performance with IAM-based auth.
end note

@enduml
