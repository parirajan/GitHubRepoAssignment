@startuml
actor Browser
actor "Nginx Proxy" as Proxy

entity "Vault Agent (Nginx)" as VaultAgentNginx
entity "Vault Agent (App)" as VaultAgentApp
entity "MTLS Cert Path (Nginx)" as CertPathNginx
entity "MTLS Cert Path (App)" as CertPathApp
entity "Application Server" as AppServer
entity "Vault Server" as Vault

' Layout organization
VaultAgentNginx -[hidden]-> Vault
Vault -[hidden]-> VaultAgentApp

' Step 1: Certificate Rendering by Vault Agents
VaultAgentNginx -> Vault: Fetch mTLS Certs for Proxy
Vault -> VaultAgentNginx: Return mTLS Certs
VaultAgentNginx -> CertPathNginx: Render and Store/Update mTLS Certs

VaultAgentApp -> Vault: Fetch mTLS Certs for App
Vault -> VaultAgentApp: Return mTLS Certs
VaultAgentApp -> CertPathApp: Render and Store/Update mTLS Certs

' Step 2: Nginx Proxy and AppServer Initialization
Proxy -> CertPathNginx: Load mTLS Cert and Key
Proxy -> Proxy: Initialize with mTLS

AppServer -> CertPathApp: Load mTLS Cert and Key
AppServer -> AppServer: Initialize with mTLS

' Step 3: Browser to Proxy Communication
Browser -> Proxy: HTTPS Request with mTLS
Proxy -> Proxy: Validate Client Certificate

' Step 4: Proxy to Application Communication
Proxy -> AppServer: Forward Request with mTLS
AppServer -> AppServer: Validate Client Certificate

' End-to-end communication
Browser -> Proxy: End-to-end mTLS Communication Secured
Proxy -> AppServer: End-to-end mTLS Communication Secured

@enduml
