# Journal Import Process Design Document

## 1. Overview

This document describes the **Journal Import Process** for **IBM Safer Payments** across four environments: **Dev**, **QA**, **Staging (DIT)**, and **Prod**. The process is managed through **Consul Watch Scripts** that detect journal version updates and trigger the journal import process. Filtering rules are applied based on the environment, allowing only **Tech Head Mandator** changes in **Dev** and both **Tech and Business Head Mandator** changes in **QA, DIT,** and **Prod**.

The process includes logging the result of each import, and updating version metadata in all clusters to track the applied journal versions.

## 2. Architecture Components

- **Consul Seeder**: A tool used by the deployment team to set and update the journal version in the **Consul KV Store**.
- **Consul KV Store**: A key-value store that holds the journal version information used by clusters to determine which version of the journal to download and apply.
- **Consul Watch Process**: A monitoring process that detects updates in the **KV Store** and triggers the download and import process for the journal file.
- **S3 Bucket (Appcore)**: Centralized storage for journal files.
- **Modelling and Execution Clusters**: Clusters in each environment (Dev, QA, Staging, Prod) responsible for importing the journal based on the environment-specific rules.
- **Journal Import Script**: A script triggered by the Consul Watch Process to download the journal from S3 and import it into the appropriate cluster.
- **Log System**: Logs the success or failure of the journal import process for auditing purposes.
- **Version Endpoint**: An endpoint used to update and display journal version metadata (version number, timestamp, and journal status) after a successful import.

## 3. Process Flow

### 3.1. Consul Seeding and Version Update

1. **Deployment Team Sets Journal Version**:
   - The **Deployment Team** decides which version of the journal should be applied to the clusters.
   - Using the **Consul Seeder**, the team sets the journal version in the **Consul KV Store** for the relevant environment (Dev, QA, Staging, or Prod).

2. **Consul KV Store Update**:
   - The **Consul Seeder** updates the journal version in the **KV Store**, triggering the **Consul Watch Process** in each environment to start the import process.

### 3.2. Journal Download and Import Process

1. **Consul Watch Script Detection**:
   - The **Consul Watch Process** running in each cluster (Modelling and Execution) detects the updated journal version in the **Consul KV Store**.
   - A **Watch Script** is triggered in each cluster to download the specified version of the journal file from the **S3 bucket**.

2. **Downloading the Journal**:
   - The **Watch Script** retrieves the journal file from the **S3 bucket** in the **Appcore AWS account**, based on the version number specified in the **KV Store**.

3. **Applying the Journal**:
   - The **Journal Import Script** is triggered to import the downloaded journal into the respective clusters based on the environment:
     - **Dev Environment**: Only the **Tech Head Mandator** changes are imported into both the **Modelling Cluster** and the **Execution Cluster**. **Business Head Mandator** changes are not imported.
     - **QA, DIT, Prod Environments**: Both **Tech Head** and **Business Head Mandator** changes are imported into both the **Modelling Cluster** and the **Execution Cluster**.

4. **Filtering Rules**:
   - **Dev Environment**: The import process filters out **Business Head Mandator** changes, applying only **Tech Head Mandator** updates.
   - **QA, DIT, Prod Environments**: No filtering is applied; both **Tech Head** and **Business Head Mandator** changes are imported.

### 3.3. Logging and Auditing

1. **Logging the Result**:
   - After the journal import process is complete, the result is logged in the **Log System**:
     - A **success** log is created if the journal is imported without errors.
     - A **failure** log is created if the import fails, and manual intervention is required.

2. **Success and Failure Folders**:
   - On successful import, the journal file is moved to the **success folder**.
   - If the import fails, the journal file is moved to the **failed folder** for further troubleshooting.

### 3.4. Version Metadata Update

1. **Version Metadata Update**:
   - After a successful import, the **Modelling Clusters** in all environments update the **Version Endpoint** with the following metadata:
     - **Version Number**: The version of the journal applied to the cluster.
     - **Timestamp**: The date and time the journal was imported.
     - **Status**: The result of the import (success or failure).

2. **Cluster-Specific Metadata Update**:
   - The version metadata is updated for the following clusters:
     - **Dev**: **Tech Head Mandator** changes only.
     - **QA, DIT, Prod**: Both **Tech Head** and **Business Head Mandator** changes.

3. **UI Access**:
   - The **deployment team** can view the updated version metadata for each cluster through the **Version Endpoint** in the UI.

## 4. Design Rules

### 4.1. Version Control
- The version of the journal to be applied is controlled by the **Consul KV Store**, which is updated by the **Consul Seeder**.
- The version specified in the KV store determines which journal file is downloaded and applied by the clusters.

### 4.2. Environment-Specific Import Rules
- **Dev Environment**:
  - Only **Tech Head Mandator** changes are imported.
  - **Business Head Mandator** changes are ignored.
- **QA, Staging (DIT), and Prod Environments**:
  - Both **Tech Head Mandator** and **Business Head Mandator** changes are imported.

### 4.3. S3 Access Control
- All clusters have **read-only** access to the **S3 bucket** in the **Appcore AWS account** for downloading journal files.

### 4.4. Logging and Auditing
- The **Log System** tracks the success or failure of the journal import process.
- Journal files are moved to either the **success folder** or **failed folder** based on the result of the import.

### 4.5. Version Metadata
- The **Version Endpoint** in each cluster is updated with the journal version, timestamp, and status after a successful import.
- This provides transparency and traceability for the journal import process.

## 5. Exception Handling

### 5.1. Download Failure
- If the journal file cannot be downloaded from the **S3 bucket**, the **Watch Script** will retry the process a set number of times.
- If the retries are exhausted, the failure is logged, and the journal file remains in the **failed folder** for manual intervention.

### 5.2. Import Failure
- If the **Journal Import Script** fails to apply the journal (due to incorrect data, conflicts, or other errors), the following steps are taken:
  1. The journal file is moved to the **failed folder**.
  2. The failure is logged in the **Log System**.
  3. Manual intervention is required to resolve the issue.

### 5.3. Version Metadata Failure
- If the **Version Endpoint** fails to update after a successful import, the issue is logged, and manual intervention is required to ensure the version metadata is correctly updated.

## 6. Sequence Diagram

```plantuml
@startuml
actor DeploymentProcess
participant "Consul Seeder" as ConsulSeeder #Orange
participant "Consul KV Store" as ConsulKV #Blue
participant "Cluster Watch Script (Dev)" as DevWatchScript #cyan
participant "Cluster Watch Script (QA)" as QAWatchScript #cyan
participant "Cluster Watch Script (DIT)" as DITWatchScript #cyan
participant "Cluster Watch Script (Prod)" as ProdWatchScript #cyan
participant "S3 Bucket (Appcore)" as S3Bucket #violet
participant "Modelling Cluster (Dev)" as DevModelling #yellow
participant "Execution Cluster (Dev)" as DevExecution #yellow
participant "Modelling Cluster (QA)" as QAModelling #yellow
participant "Execution Cluster (QA)" as QAExecution #yellow
participant "Modelling Cluster (DIT)" as DITModelling #yellow
participant "Execution Cluster (DIT)" as DITExecution #yellow
participant "Modelling Cluster (Prod)" as ProdModelling #yellow
participant "Execution Cluster (Prod)" as ProdExecution #yellow
participant "Logging" as SysLog #red
participant "Version Endpoint (Dev)" as DevVersionEndpoint #green
participant "Version Endpoint (QA)" as QAVersionEndpoint #green
participant "Version Endpoint (DIT)" as DITVersionEndpoint #green
participant "Version Endpoint (Prod)" as ProdVersionEndpoint #green

' Step 1: Deployment team updates version in Consul
DeploymentProcess -> ConsulSeeder: Set Journal Version
ConsulSeeder -> ConsulKV: Update Version in KV Store

' Step 2: Consul Watch Script in each cluster picks up the update
ConsulKV -> DevWatchScript: Trigger Watch Process (Dev)
ConsulKV -> QAWatchScript: Trigger Watch Process (QA)
ConsulKV -> DITWatchScript: Trigger Watch Process (DIT)
ConsulKV -> ProdWatchScript: Trigger Watch Process (Prod)

' Step 3: Watch script downloads the journal file based on version
DevWatchScript -> S3Bucket: Download Journal (Dev)
QAWatchScript -> S3Bucket: Download Journal (QA)
DITWatchScript -> S3Bucket: Download Journal (DIT)
ProdWatchScript -> S3Bucket: Download Journal (Prod)

' Step 4: Import process with rules

DevWatchScript -> DevModelling --++ #gold: Import Tech Head Mandator (Dev) : Filter
DevWatchScript -> DevExecution --++ #gold: Import Tech Head Mandator (Dev) : Filter

QAWatchScript -> QAModelling: Import Tech & Business Head Mandators (QA)
QAWatchScript -> QAExecution: Import Tech & Business Head Mandators (QA)

DITWatchScript -> DITModelling: Import Tech & Business Head Mandators (DIT)
DITWatchScript -> DITExecution: Import Tech & Business Head Mandators (DIT)

ProdWatchScript -> ProdModelling: Import Tech & Business Head Mandators (Prod)
ProdWatchScript -> ProdExecution: Import Tech & Business Head Mandators (Prod)

' Step 5: Log the result of the import process
DevModelling -> SysLog: Log Success (Dev)
QAModelling -> SysLog: Log Success (QA)
DITModelling -> SysLog: Log Success (DIT)
ProdModelling -> SysLog: Log Success (Prod)

' Step 6: Update version metadata in all clusters
DevModelling -> DevVersionEndpoint: Update Version Metadata (Dev)
QAModelling -> QAVersionEndpoint: Update Version Metadata (QA)
DITModelling -> DITVersionEndpoint: Update Version Metadata (DIT)
ProdModelling -> ProdVersionEndpoint: Update Version Metadata (Prod)
@enduml
```
