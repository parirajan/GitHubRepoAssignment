

# Cross-Account S3 and KMS Access Setup (Updated with Policies)

## Summary
This setup enables secure, cross-account access management to an S3 bucket using instance roles, encryption via AWS KMS, and restrictive access policies. The setup supports multiple AWS accounts writing to the S3 bucket with KMS encryption restrictions based on specific IAM roles, as well as read-only access from another AWS account.

### Key Components:
1. **S3 Bucket in a Common AWS Account (Account B)**:
   - Stores journal data.
   - Uses a KMS key to encrypt objects.
   - Bucket policy restricts write and read access based on instance roles from other AWS accounts.

2. **KMS Key in Account B**:
   - Encrypts and decrypts objects stored in the S3 bucket.
   - KMS key policy restricts encryption (write) for specific IAM roles from **two different AWS accounts** (Account A and Account D).
   - KMS key policy restricts decryption (read) to instances in **Account C**.

### S3 Bucket Policy (Account B)
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "arn:aws:iam::AccountA:role/EC2RoleForJournalWrites",
          "arn:aws:iam::AccountD:role/EC2RoleForJournalWrites"
        ]
      },
      "Action": "s3:PutObject",
      "Resource": "arn:aws:s3:::safer-payments-journal/*"
    },
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::AccountC:role/EC2RoleForJournalReads"
      },
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::safer-payments-journal/*"
    }
  ]
}
```

### KMS Key Policy (Account B)
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "arn:aws:iam::AccountA:role/EC2RoleForJournalWrites",
          "arn:aws:iam::AccountD:role/EC2RoleForJournalWrites"
        ]
      },
      "Action": [
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::AccountC:role/EC2RoleForJournalReads"
      },
      "Action": [
        "kms:Decrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
      ],
      "Resource": "*"
    }
  ]
}
```

### Flow:
- **Writers (Account A & Account D)**: 
   - EC2 instances with designated IAM roles from **two different AWS accounts** (Account A and Account D) upload encrypted objects to the S3 bucket using the KMS key.
   - The KMS key policy only allows encryption (write access) for these specific roles, ensuring restricted access even if other roles exist in these accounts.
   
- **Readers (Account C)**: 
   - EC2 instances with a specific IAM role from **Account C** can read and decrypt objects from the S3 bucket.

### Diagram:
![Cross-Account S3 and KMS Access with Policies](s3_cross_account_access_policies.puml)
