# Journal Upload Process Design Document

## 1. Overview

This document describes the journal upload process for **IBM Safer Payments**, deployed across four environments: **Dev**, **QA**, **Staging**, and **Prod**. Each environment is hosted in a separate AWS account, with dedicated clusters for modeling and execution. Only the **Dev** and **Prod Modelling Clusters** have permission to export journal files and upload them to an **S3 bucket** in the **Appcore AWS account**. This design focuses on the upload process, from ServiceNow documentation to version control, following strict access and role-based rules.

## 2. Architecture Components

- **ServiceNow**: Used to document and approve the changes before applying them.
- **Modelling Cluster (Dev)**: Allows exporting journal files for **tech head mandator** changes.
- **Modelling Cluster (Prod)**: Allows exporting journal files for both **tech head** and **business head mandator** changes.
- **Execution Cluster (All)**: Has no write permission but can read from the S3 bucket.
- **S3 Bucket (Appcore)**: Centralized storage for journals, with restricted write permissions.
- **Local Disk**: Temporary storage on Modelling Clusters where the journal file is written.
- **Watch Script**: Detects updates to the local disk and triggers uploads to the S3 bucket.
- **Version Endpoint**: Tracks journal version metadata (version, timestamp, filename) in the UI.

## 3. Environments

### 3.1. Dev Environment
- **AWS Account**: Dev
- **Modelling Cluster**: Exports journals for **tech head mandator** updates.
- **Execution Cluster**: Has **read-only** access to the S3 bucket.
  
### 3.2. QA Environment
- **AWS Account**: QA
- **Modelling Cluster**: **Read-only** access to the S3 bucket.
- **Execution Cluster**: **Read-only** access to the S3 bucket.

### 3.3. Staging Environment (DIT)
- **AWS Account**: Staging
- **Modelling Cluster**: **Read-only** access to the S3 bucket.
- **Execution Cluster**: **Read-only** access to the S3 bucket.

### 3.4. Prod Environment
- **AWS Account**: Prod
- **Modelling Cluster**: Exports journals for both **tech head** and **business head mandator** updates.
- **Execution Cluster**: Has **read-only** access to the S3 bucket.

### 3.5. Appcore AWS Account
- **S3 Bucket**: Centralized storage for all journal files. Write access is restricted to the **Dev** and **Prod Modelling Clusters**. All other clusters have **read-only** access.

## 4. Process Flow

### 4.1. Documenting Changes in ServiceNow

1. **User Initiates Changes**:
   - The **user** documents the proposed changes in **ServiceNow**. 
     - **Dev Modelling Cluster**: Documents **tech head mandator** changes.
     - **Prod Modelling Cluster**: Documents both **tech head** and **business head mandator** changes.
   
2. **ServiceNow Approval Workflow**:
   - Once the changes are documented, they go through an approval workflow in **ServiceNow**.
   - Only after receiving approval can the changes be applied through the UI.

### 4.2. Applying Changes via UI

1. **User Logs into UI**:
   - After receiving approval, the **user** logs into the respective **Modelling Cluster** via the **UI**.
   
2. **Applying Changes**:
   - The **user** applies the approved changes:
     - **Dev Modelling Cluster**: Updates the **tech head mandator**.
     - **Prod Modelling Cluster**: Updates both the **tech head** and **business head mandator**.

3. **Journal Export**:
   - Once the changes are applied, the **Modelling Cluster** exports the journal file to the **local disk**.
   - The journal file includes the updated data, a **checksum** for validation, a **timestamp**, and a **version number** (based on date, time, and source cluster).

### 4.3. Watch Script and S3 Upload Process

1. **Watch Script Detects Changes**:
   - A **watch script** running on the **Modelling Cluster** continuously monitors the **local disk** for new or updated journal files.

2. **Triggering the Upload**:
   - When the watch script detects a new or modified journal file, it initiates the upload process to the **S3 bucket** in the **Appcore AWS account**.

3. **S3 Upload**:
   - The journal file is uploaded to the **S3 bucket**. 
   - Only the **Dev Modelling Cluster** and **Prod Modelling Cluster** have **write access** to the bucket, ensuring secure control over journal uploads.

4. **Upload Confirmation**:
   - After a successful upload, the watch script logs the upload status and confirms that the journal is stored in S3.

### 4.4. Version Update in the UI

1. **Version Metadata Update**:
   - After the journal is uploaded to S3, the **Modelling Cluster** updates the **Version Endpoint** in the UI with the following metadata:
     - **Version**: The journal version (e.g., based on timestamp and source cluster).
     - **Timestamp**: The exact time the journal was created and exported.
     - **File Name**: The name of the exported journal file.
   
2. **User Notification**:
   - The **user** can view the updated journal metadata in the UI via the **/journal_version** endpoint.

## 5. Design Rules

### 5.1. Access Control
- **Dev Modelling Cluster** and **Prod Modelling Cluster** have **write** access to the **S3 bucket** in the **Appcore AWS account**.
- **QA, Staging, and Execution Clusters** in all environments only have **read-only** access to the S3 bucket.

### 5.2. Journal Export Rules
- **Dev Modelling Cluster**: Only **tech head mandator** changes are exported to the S3 bucket.
- **Prod Modelling Cluster**: Both **tech head** and **business head mandator** changes are exported.

### 5.3. Versioning
- Each journal file uploaded to the S3 bucket is tagged with a **version** number that reflects:
  - The source cluster (Dev or Prod).
  - The **timestamp** of the journal creation.
  
### 5.4. Metadata and UI Updates
- The **Version Endpoint** in the UI is updated with the journal metadata after a successful upload:
  - **Version**, **timestamp**, and **file name**.
  
## 6. Exception Handling

### 6.1. Approval Failure
- If the changes are not approved in **ServiceNow**, the user is unable to apply the changes through the UI.
- The process remains blocked until approval is granted, ensuring that no unapproved journal changes are uploaded to the S3 bucket.

### 6.2. Upload Failure
- If the upload to the **S3 bucket** fails, the **watch script** retries the upload a set number of times.
- After exhausting the retries, the process logs the failure, and the journal remains on the **local disk** for manual intervention.

### 6.3. Version Update Failure
- If the **Version Endpoint** fails to update after the journal upload, the issue is logged and the user is notified.
- Manual intervention may be required to ensure the version metadata is correctly updated in the UI.

## 7. Sequence Diagram

Below is a UML sequence diagram for the **Journal Upload Process**:

```puml
@startuml
actor User
participant "ServiceNow" as ServiceNow
participant "Dev Modelling Cluster" as DevModelling
participant "Prod Modelling Cluster" as ProdModelling
participant "UI" as UI
participant "Local Disk (Dev)" as DevLocalDisk
participant "Local Disk (Prod)" as ProdLocalDisk
participant "Watch Script" as WatchScript
participant "S3 Bucket (Appcore)" as S3Bucket
participant "Version Endpoint" as VersionEndpoint

' Step 1: Document changes in ServiceNow for Dev
User -> ServiceNow: Document Tech Head Mandator Changes (Dev)
ServiceNow -> User: Approval Granted

' Step 2: User logs into UI to apply changes for Dev
User -> UI: Login to Dev Modelling Cluster
UI -> DevModelling: Apply Tech Head Mandator Changes (Dev)

' Step 3: Export journal file to local disk
DevModelling -> DevLocalDisk: Export Journal File

' Step 4: Watch Script detects file and uploads to S3
DevLocalDisk -> WatchScript: Journal File Updated
WatchScript -> S3Bucket: Upload Journal File

' Step 5: S3 confirms journal upload
S3Bucket -> DevModelling: Journal Uploaded

' Step 6: Update version endpoint
DevModelling -> VersionEndpoint: Update Version Metadata

' Repeat for Prod Modelling Cluster
@enduml
