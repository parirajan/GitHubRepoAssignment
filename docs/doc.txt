# Exclusion List Change Control Process

## Overview:
The **Exclusion List Change Control Process** in IBM Safer Payments manages changes that are not captured in journal files. These changes include critical system and cluster settings that are necessary for operational configuration but are excluded from journal exports. This design ensures updates are validated and propagated through the environments systematically via automated processes.

## Components Included in the Exclusion List:
The **Exclusion List** includes specific system-level configurations that are crucial for system operation but are not exported through standard journal files. These include:

1. **Cluster Settings**:
   - Configuration of cluster behavior for managing data processing, balancing, and system resources.
   - Changes that affect performance, scaling, or operational thresholds.

2. **System Settings**:
   - Modifications to system-level configurations for the underlying infrastructure.
   - Includes updates to parameters like logging, network configurations, and resource allocation.

3. **Risk List Entities**:
   - Risk lists crucial to fraud detection but not exported for security purposes.
   - These lists are periodically updated and require validation before deployment.

4. **Analysis Model Generation**:
   - Adjustments to models used for transaction analysis, fraud detection, and risk scoring.
   - Changes must be validated in Dev before promotion to production.

5. **Encryption Keys**:
   - Key management for securing communications and sensitive data.
   - Updates are crucial and must remain protected from exposure in journal exports.

6. **Cases and Notices**:
   - Changes to case management workflows and user notices.
   - Sensitive information included in these updates makes them part of the exclusion list.

7. **AMI Elements**:
   - Components of the Amazon Machine Image (AMI) used during system startup and scaling.
   - Includes startup scripts and pre-configurations for consistent AMI-based deployment.

8. **Simulation**:
   - Settings for the fraud simulation engine, including parameters for testing different fraud scenarios.
   - These sensitive parameters are excluded from export for security reasons.

## Process Workflow:

### 1. User Interaction via UI:
The administrator initiates changes in the Dev environment via the **Settings Update UI**, making updates that fall under the exclusion list (e.g., cluster and system settings).

### 2. Validation:
After the updates, the **Validation** control processes and tests the changes in the Dev environment. Only after successful validation are the changes passed on for further action.

### 3. Source Repository Update:
Once validated, the changes are captured in the source repository templates (`system.iris.template` and `cluster.iris.template`). This ensures future builds will incorporate these changes automatically.

### 4. AMI Build:
After the repository templates are updated, the **AMI Build** process is triggered, generating a new AMI with the updated configurations from the source repository.

### 5. SBOM Update:
The newly created AMI is registered with an updated AMI ID in the **Software Bill of Materials (SBOM)**, ensuring traceability and consistency across deployments.

### 6. Deployment via Deployer:
The **Deployer** control promotes the new AMI across different environments. Deployment is conducted sequentially, starting with the **Dev Environment Clusters**, followed by **QA**, **DIT**, and finally **Production**. Each environment is color-coded for visual clarity (Dev: Blue, QA/DIT/Prod: Purple).

## Process Diagram:

```puml
@startuml
actor "User" as User

User -> "Settings Update via UI" : Interact with UI

create control Validation
"Settings Update via UI" -> Validation : Exclusion List updates (cluster and system settings)

create "Source Repository Update"
Validation -> "Source Repository Update" --++ #yellow : Capture changes in templates

create "AMI Build"
"Source Repository Update" -> "AMI Build" : Build new AMI with updated templates

"AMI Build" -> "SBOM" : Update AMI ID in SBOM
note right of "SBOM" : SBOM updated with new AMI ID

create control Deployer
"SBOM" -> Deployer : Promote new AMI

Deployer -->  "Dev Environment Clusters" --++ #blue : Deploy to Dev
Deployer -->  "QA Environment Clusters" --++ #purple : Deploy to QA
Deployer -->  "DIT Environment Clusters" --++ #purple : Deploy to DIT
Deployer -->  "Prod Environment Clusters" --++ #purple : Deploy to Prod

@enduml
